name: Java Bug Prediction Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.java'

jobs:
  bug-prediction:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Verify Java installation
      run: |
        java -version
        echo "Java home: $JAVA_HOME"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas scikit-learn==1.7.1 tensorflow torch scipy tqdm
        pip install -r requirements.txt || {
          echo "Failed to install with specific versions, trying with compatible versions..."
          pip install numpy pandas scikit-learn tensorflow torch scipy tqdm
          pip install -r requirements.txt
        }
        
    - name: Verify AST encoder setup
      run: |
        echo "Checking AST encoder setup..."
        ls -la semantic-dataset-creation/
        ls -la semantic-dataset-creation/config/
        echo "AST encoder JAR exists: $([ -f "semantic-dataset-creation/ASTEncoder-v1.2.jar" ] && echo "YES" || echo "NO")"
        echo "Config files exist: $([ -f "semantic-dataset-creation/config/parser.properties" ] && echo "YES" || echo "NO")"
        
    - name: Verify trained models
      run: |
        echo "Checking trained models..."
        ls -la trained_models/
        echo "Models exist:"
        echo "  DA: $([ -f "trained_models/repd_model_DA.pkl" ] && echo "YES" || echo "NO")"
        echo "  Training results: $([ -f "trained_models/training_results.pkl" ] && echo "YES" || echo "NO")"
        
    - name: Run component tests
      run: |
        echo "Running component tests..."
        python test_workflow.py

    - name: Get changed Java files
      id: changed-files
      run: |
        # Get list of changed Java files in the PR
        git diff --name-only origin/${{ github.base_ref }}..HEAD | grep '\.java$' > changed_files.txt || true

        echo "Debug: Checking for changed files..."
        echo "Current directory: $(pwd)"
        echo "Git diff command output:"
        git diff --name-only origin/${{ github.base_ref }}..HEAD || echo "Git diff failed"
        echo "Changed files content:"
        cat changed_files.txt || echo "No changed_files.txt found"

        # If no changed files found, look for any Java files in the repository
        if [ ! -s changed_files.txt ]; then
          echo "No changed Java files found, looking for any Java files in repository..."
          find . -name "*.java" -type f > changed_files.txt || true
          echo "Found Java files in repository:"
          cat changed_files.txt || echo "No Java files found in repository"
        fi

        if [ -s changed_files.txt ]; then
          echo "changed_files_exist=true" >> $GITHUB_OUTPUT
          echo "Java files to analyze:"
          cat changed_files.txt

          # Store changed files for later use
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          cat changed_files.txt
          echo "EOF" >> $GITHUB_ENV
        else
          echo "changed_files_exist=false" >> $GITHUB_OUTPUT
          echo "No Java files found in this PR or repository"
        fi

    - name: Analyze BEFORE state (base branch)
      if: steps.changed-files.outputs.changed_files_exist == 'true'
      run: |
        echo "Analyzing BEFORE state (base branch)..."
        
        # Checkout the base branch to analyze original files
        git stash push -m "Stash current changes"
        git checkout origin/${{ github.base_ref }}
        
        # Create list of files that exist in base branch
        echo "$CHANGED_FILES" > files_to_analyze.txt
        existing_files=()
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            existing_files+=("$file")
          fi
        done < files_to_analyze.txt

        if [ ${#existing_files[@]} -gt 0 ]; then
          echo "Analyzing BEFORE state for files: ${existing_files[*]}"
          python -u bug_prediction_pipeline.py --files "${existing_files[@]}" --output before_analysis_results --report 2>&1 || {
            echo "Before analysis failed, trying simple predictor..."
            python -u simple_bug_predictor.py --files "${existing_files[@]}" --output before_analysis_results || {
              echo "Creating empty before results"
              mkdir -p before_analysis_results
              echo "Before analysis failed" > before_analysis_results/error.txt
            }
          }
        else
          echo "No files to analyze in base branch"
          mkdir -p before_analysis_results
          echo "No files found in base branch" > before_analysis_results/error.txt
        fi
        
        # Return to PR branch
        git checkout -
        git stash pop || echo "No stash to pop"

    - name: Analyze AFTER state (current branch)
      if: steps.changed-files.outputs.changed_files_exist == 'true'
      run: |
        # Create list of changed Java files
        echo "$CHANGED_FILES" > files_to_analyze.txt

        # Filter out files that actually exist (in case of deletions)
        existing_files=()
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            existing_files+=("$file")
          fi
        done < files_to_analyze.txt

        echo "Debug: AFTER state analysis"
        echo "Files to analyze content:"
        cat files_to_analyze.txt || echo "No files_to_analyze.txt found"
        echo "CHANGED_FILES environment variable:"
        echo "$CHANGED_FILES"
        echo "Number of existing files: ${#existing_files[@]}"
        echo "Existing files: ${existing_files[*]}"

        if [ ${#existing_files[@]} -gt 0 ]; then
          echo "Analyzing AFTER state for files: ${existing_files[*]}"
          echo "Number of files to analyze: ${#existing_files[@]}"
          echo "Current working directory: $(pwd)"
          echo "Files exist check:"
          for file in "${existing_files[@]}"; do
            echo "  $file: $([ -f "$file" ] && echo "EXISTS" || echo "MISSING")"
          done
          echo "Running bug prediction pipeline..."
          echo "Command: python bug_prediction_pipeline.py --files ${existing_files[*]} --output after_analysis_results --report"
          
          python -u bug_prediction_pipeline.py --files "${existing_files[@]}" --output after_analysis_results --report 2>&1 || {
            echo "Main analysis failed with exit code $?"
            echo "Trying simple bug predictor as fallback..."
            python -u simple_bug_predictor.py --files "${existing_files[@]}" --output after_analysis_results || {
              echo "Simple predictor also failed, creating empty results directory"
              mkdir -p after_analysis_results
              echo "Analysis failed - check logs for details" > after_analysis_results/error.txt
            }
          }
          
          echo "Checking AFTER results directory..."
          ls -la after_analysis_results/ || echo "Results directory not created"
        else
          echo "No existing Java files to analyze"
          
          # Fallback: analyze any Java files in the repository
          echo "Trying fallback: analyzing any Java files in repository..."
          fallback_files=($(find . -name "*.java" -type f | head -5))
          if [ ${#fallback_files[@]} -gt 0 ]; then
            echo "Found fallback files: ${fallback_files[*]}"
            echo "Testing with first fallback file: ${fallback_files[0]}"
            python -u simple_bug_predictor.py --files "${fallback_files[0]}" --output after_analysis_results || {
              echo "Fallback analysis also failed"
              mkdir -p after_analysis_results
              echo "Analysis failed - no files could be processed" > after_analysis_results/error.txt
            }
          else
            echo "No Java files found for fallback analysis"
            mkdir -p after_analysis_results
            echo "No Java files found to analyze" > after_analysis_results/error.txt
          fi
        fi

    - name: Ensure results directory exists
      run: |
        # Ensure results directories exist for comment generation
        mkdir -p before_analysis_results || true
        mkdir -p after_analysis_results || true
        
        if [ ! -f "before_analysis_results/error.txt" ] && [ ! -f "before_analysis_results/*_DA_predictions.csv" ]; then
          echo "No before analysis results found, creating error file"
          echo "No analysis results available for base branch" > before_analysis_results/error.txt
        fi
        
        if [ ! -f "after_analysis_results/error.txt" ] && [ ! -f "after_analysis_results/*_DA_predictions.csv" ]; then
          echo "No after analysis results found, creating error file"
          echo "No analysis results available for current branch" > after_analysis_results/error.txt
        fi

    - name: Generate PR comment with comparison
      run: |
        echo "Generating PR comment with before/after comparison..."
        echo "Current directory: $(pwd)"
        echo "Before results directory contents:"
        ls -la before_analysis_results/ || echo "Before results directory not found"
        echo "After results directory contents:"
        ls -la after_analysis_results/ || echo "After results directory not found"
        
        # Always try to generate a comment, even if no files were found
        if [ ! -d "before_analysis_results" ]; then
          echo "No before results directory found, creating error comment"
          mkdir -p before_analysis_results
          echo "Analysis failed - no before results generated" > before_analysis_results/error.txt
        fi
        
        if [ ! -d "after_analysis_results" ]; then
          echo "No after results directory found, creating error comment"
          mkdir -p after_analysis_results
          echo "Analysis failed - no after results generated" > after_analysis_results/error.txt
        fi
        
        python << 'EOF'
        import os
        import json
        import pandas as pd
        import numpy as np
        from pathlib import Path

        def load_prediction_data(results_dir):
            """Load prediction data from results directory"""
            if not os.path.exists(results_dir):
                return None, None
                
            prediction_files = list(Path(results_dir).glob("*_DA_predictions.csv"))
            summary_files = list(Path(results_dir).glob("*_prediction_summary.json"))
            
            predictions_df = None
            summary_data = {}
            
            if prediction_files:
                try:
                    predictions_df = pd.read_csv(prediction_files[0])
                except Exception as e:
                    print(f"Error loading predictions from {prediction_files[0]}: {e}")
            
            if summary_files:
                try:
                    with open(summary_files[0], 'r') as f:
                        summary_data = json.load(f)
                except Exception as e:
                    print(f"Error loading summary from {summary_files[0]}: {e}")
                    
            return predictions_df, summary_data

        def generate_comparison_comment():
            before_results_dir = "before_analysis_results"
            after_results_dir = "after_analysis_results"

            # Load before and after data
            before_df, before_summary = load_prediction_data(before_results_dir)
            after_df, after_summary = load_prediction_data(after_results_dir)

            comment_lines = [
                "## � Bug Prediction Analysis",
                "",
                "**Analysis completed using REPD Deep Autoencoder (DA) model**",
                ""
            ]

            # Check if we have valid data for comparison
            has_before = before_df is not None and len(before_df) > 0
            has_after = after_df is not None and len(after_df) > 0

            if not has_before and not has_after:
                comment_lines.extend([
                    "⚠️ **No analysis data available**",
                    "",
                    "Unable to perform before/after comparison - no prediction data found.",
                    "This may indicate an issue with the analysis process."
                ])
                return "\n".join(comment_lines)

            if not has_before:
                comment_lines.extend([
                    "⚠️ **Before state analysis unavailable**",
                    "",
                    "Only current state analysis is available.",
                    "Files may be newly added in this PR."
                ])
                # Fall back to showing only after results
                return generate_single_state_comment(after_df, after_summary, "Current State")

            if not has_after:
                comment_lines.extend([
                    "⚠️ **After state analysis unavailable**",
                    "",
                    "Only base branch analysis is available.",
                    "Files may have been deleted in this PR."
                ])
                return "\n".join(comment_lines)

            # We have both before and after data - generate comparison
            comment_lines.extend([
                f"📊 **Files Analyzed:** {len(after_df)}",
                f"🤖 **Model Used:** Deep Autoencoder (DA)",
                ""
            ])

            # File-by-file comparison with the requested format
            # Create a mapping of files for comparison
            if 'file_path' in before_df.columns and 'file_path' in after_df.columns:
                file_col = 'file_path'
            elif 'file_id' in before_df.columns and 'file_id' in after_df.columns:
                file_col = 'file_id'
            else:
                # Assume same order if no file identifiers
                file_col = None

            if file_col:
                # Merge dataframes on file identifier
                before_df_indexed = before_df.set_index(file_col)
                after_df_indexed = after_df.set_index(file_col)
                
                # Find common files
                common_files = set(before_df_indexed.index) & set(after_df_indexed.index)
                
                if common_files:
                    for file_path in sorted(common_files):
                        before_prob_defective = before_df_indexed.loc[file_path, 'probability_defective']
                        after_prob_defective = after_df_indexed.loc[file_path, 'probability_defective']
                        before_pred = before_df_indexed.loc[file_path, 'prediction']
                        after_pred = after_df_indexed.loc[file_path, 'prediction']
                        
                        # Calculate probability of non-defective (1 - probability_defective)
                        before_prob_non_defective = 1.0 - before_prob_defective
                        after_prob_non_defective = 1.0 - after_prob_defective
                        
                        # Calculate percentage changes
                        if before_prob_defective > 0:
                            defective_change = ((after_prob_defective - before_prob_defective) / before_prob_defective) * 100
                        else:
                            defective_change = float('inf') if after_prob_defective > 0 else 0
                        
                        if before_prob_non_defective > 0:
                            non_defective_change = ((after_prob_non_defective - before_prob_non_defective) / before_prob_non_defective) * 100
                        else:
                            non_defective_change = float('inf') if after_prob_non_defective > 0 else 0
                        
                        # Determine outcome change
                        before_status = "Defective" if before_pred == 1 else "Non-Defective"
                        after_status = "Defective" if after_pred == 1 else "Non-Defective"
                        
                        # Format file name (keep original name format)
                        display_name = file_path
                        
                        comment_lines.extend([
                            f"**File:** {display_name}",
                            f"**Outcome:** {before_status} -> {after_status}",
                            "",
                            "| Metric | BEFORE PR | AFTER PR | % Change |",
                            "|--------|-----------|----------|----------|"
                        ])
                        
                        # Format the probability values in scientific notation
                        before_defective_sci = f"{before_prob_defective:.5e}"
                        after_defective_sci = f"{after_prob_defective:.5e}"
                        before_non_defective_sci = f"{before_prob_non_defective:.5e}"
                        after_non_defective_sci = f"{after_prob_non_defective:.5e}"
                        
                        # Format percentage changes
                        if defective_change == float('inf'):
                            defective_change_str = "+∞%"
                        elif defective_change == 0:
                            defective_change_str = "0%"
                        else:
                            defective_change_str = f"{defective_change:+.2f}%"
                        
                        if non_defective_change == float('inf'):
                            non_defective_change_str = "+∞%"
                        elif non_defective_change == 0:
                            non_defective_change_str = "0%"
                        else:
                            non_defective_change_str = f"{non_defective_change:+.2f}%"
                        
                        comment_lines.extend([
                            f"| PDF(Defective \\| Reconstruction Error) | {before_defective_sci} | {after_defective_sci} | {defective_change_str} |",
                            f"| PDF(Non-Defective \\| Reconstruction Error) | {before_non_defective_sci} | {after_non_defective_sci} | {non_defective_change_str} |",
                            ""
                        ])
                else:
                    comment_lines.append("No common files found for comparison.")
            else:
                # Fallback: assume same order and compare by index
                min_len = min(len(before_df), len(after_df))
                for i in range(min_len):
                    before_prob_defective = before_df.iloc[i]['probability_defective']
                    after_prob_defective = after_df.iloc[i]['probability_defective']
                    before_pred = before_df.iloc[i]['prediction']
                    after_pred = after_df.iloc[i]['prediction']
                    
                    # Calculate probability of non-defective
                    before_prob_non_defective = 1.0 - before_prob_defective
                    after_prob_non_defective = 1.0 - after_prob_defective
                    
                    # Calculate percentage changes
                    if before_prob_defective > 0:
                        defective_change = ((after_prob_defective - before_prob_defective) / before_prob_defective) * 100
                    else:
                        defective_change = float('inf') if after_prob_defective > 0 else 0
                    
                    if before_prob_non_defective > 0:
                        non_defective_change = ((after_prob_non_defective - before_prob_non_defective) / before_prob_non_defective) * 100
                    else:
                        non_defective_change = float('inf') if after_prob_non_defective > 0 else 0
                    
                    before_status = "Defective" if before_pred == 1 else "Non-Defective"
                    after_status = "Defective" if after_pred == 1 else "Non-Defective"
                    
                    # Try to get file name from dataframe if available
                    file_name = "Unknown"
                    if 'file_path' in before_df.columns:
                        file_name = before_df.iloc[i]['file_path']
                    elif 'file_id' in before_df.columns:
                        file_name = before_df.iloc[i]['file_id']
                    else:
                        file_name = f"File_{i+1}.java"
                    
                    comment_lines.extend([
                        f"**File:** {file_name}",
                        f"**Outcome:** {before_status} -> {after_status}",
                        "",
                        "| Metric | BEFORE PR | AFTER PR | % Change |",
                        "|--------|-----------|----------|----------|"
                    ])
                    
                    # Format the probability values in scientific notation
                    before_defective_sci = f"{before_prob_defective:.5e}"
                    after_defective_sci = f"{after_prob_defective:.5e}"
                    before_non_defective_sci = f"{before_prob_non_defective:.5e}"
                    after_non_defective_sci = f"{after_prob_non_defective:.5e}"
                    
                    # Format percentage changes
                    if defective_change == float('inf'):
                        defective_change_str = "+∞%"
                    elif defective_change == 0:
                        defective_change_str = "0%"
                    else:
                        defective_change_str = f"{defective_change:+.2f}%"
                    
                    if non_defective_change == float('inf'):
                        non_defective_change_str = "+∞%"
                    elif non_defective_change == 0:
                        non_defective_change_str = "0%"
                    else:
                        non_defective_change_str = f"{non_defective_change:+.2f}%"
                    
                    comment_lines.extend([
                        f"| PDF(Defective \\| Reconstruction Error) | {before_defective_sci} | {after_defective_sci} | {defective_change_str} |",
                        f"| PDF(Non-Defective \\| Reconstruction Error) | {before_non_defective_sci} | {after_non_defective_sci} | {non_defective_change_str} |",
                        ""
                    ])

            # Overall comparison summary
            before_avg = before_df['probability_defective'].mean()
            after_avg = after_df['probability_defective'].mean()
            before_defective_count = (before_df['prediction'] == 1).sum()
            after_defective_count = (after_df['prediction'] == 1).sum()
            
            overall_change = ((after_avg - before_avg) / before_avg) * 100 if before_avg > 0 else 0
            
            comment_lines.extend([
                "### 📊 Overall Impact Summary",
                "",
                "| Metric | BEFORE PR | AFTER PR | Change |",
                "|--------|-----------|----------|--------|",
                f"| Average Defect Probability | {before_avg:.5e} | {after_avg:.5e} | {overall_change:+.2f}% |",
                f"| Files Predicted Defective | {before_defective_count}/{len(before_df)} | {after_defective_count}/{len(after_df)} | {after_defective_count - before_defective_count:+d} |",
                ""
            ])

            # Assessment
            comment_lines.extend([
                "### 📋 Impact Assessment",
                ""
            ])

            if after_avg > before_avg:
                if overall_change > 50:
                    comment_lines.append("🚨 **SIGNIFICANT INCREASE IN RISK**: This PR substantially increases bug risk.")
                elif overall_change > 10:
                    comment_lines.append("⚠️ **MODERATE INCREASE IN RISK**: This PR increases bug risk.")
                else:
                    comment_lines.append("🟡 **SLIGHT INCREASE IN RISK**: Minor increase in bug risk detected.")
            elif after_avg < before_avg:
                if abs(overall_change) > 50:
                    comment_lines.append("✅ **SIGNIFICANT IMPROVEMENT**: This PR substantially reduces bug risk.")
                elif abs(overall_change) > 10:
                    comment_lines.append("✅ **MODERATE IMPROVEMENT**: This PR reduces bug risk.")
                else:
                    comment_lines.append("🟢 **SLIGHT IMPROVEMENT**: Minor reduction in bug risk detected.")
            else:
                comment_lines.append("➡️ **NO SIGNIFICANT CHANGE**: Bug risk remains approximately the same.")

            # Recommendations
            comment_lines.extend([
                "",
                "### 💡 Recommendations",
                ""
            ])

            if after_avg > before_avg and overall_change > 10:
                comment_lines.extend([
                    "🔍 **Increased scrutiny recommended for code review**",
                    "🧪 **Consider additional testing for modified components**",
                    "📝 **Review complex changes that may have introduced risk**",
                    "⚠️ **Pay special attention to files with significant probability increases**"
                ])
            elif after_avg < before_avg:
                comment_lines.extend([
                    "✅ **Changes appear to improve code quality**",
                    "📋 **Standard review process should be sufficient**",
                    "🎯 **Good refactoring or bug fix patterns detected**"
                ])
            else:
                comment_lines.extend([
                    "📋 **Standard code review process recommended**",
                    "🔍 **Focus on usual code quality aspects**"
                ])

            comment_lines.extend([
                "",
                "---",
                "*🤖 Generated by REPD Bug Prediction System*",
                "*📊 Based on semantic analysis of Java code using trained autoencoders*",
                "*📈 Before/After comparison shows impact of PR changes*"
            ])

            return "\n".join(comment_lines)

        def generate_single_state_comment(df, summary_data, state_name):
            """Generate comment for single state when comparison isn't available"""
            comment_lines = [
                f"## 🔍 Java Bug Prediction Analysis - {state_name}",
                "",
                "**Analysis completed using REPD Deep Autoencoder (DA) model**",
                ""
            ]

            if df is not None and len(df) > 0:
                defective_count = (df['prediction'] == 1).sum()
                defect_rate = (defective_count / len(df)) * 100
                avg_prob = df['probability_defective'].mean()

                comment_lines.extend([
                    f"📊 **Files Analyzed:** {len(df)}",
                    f"🤖 **Model Used:** Deep Autoencoder (DA)",
                    "",
                    "### 🔬 Analysis Results",
                    "",
                    f"- **Predicted Defective:** {defective_count}/{len(df)} files ({defect_rate:.1f}%)",
                    f"- **Average Defect Probability:** {avg_prob:.4f}",
                    ""
                ])

                # Top risky files
                top_risky = df.nlargest(min(3, len(df)), 'probability_defective')
                if len(top_risky) > 0:
                    comment_lines.extend([
                        "**🚨 Top Risky Files:**",
                        "",
                        "| File | Defect Probability | Status |",
                        "|------|-------------------|--------|"
                    ])

                    for _, row in top_risky.iterrows():
                        file_name = row.get('file_path', row.get('file_id', 'Unknown'))
                        if isinstance(file_name, str) and len(file_name) > 50:
                            file_name = "..." + file_name[-47:]

                        prob = row['probability_defective']
                        status = "🔴 High Risk" if prob > 0.7 else "🟡 Medium Risk" if prob > 0.3 else "🟢 Low Risk"
                        comment_lines.append(f"| `{file_name}` | {prob:.4f} | {status} |")

            return "\n".join(comment_lines)

        # Generate and save comment
        comment_content = generate_comparison_comment()

        with open('pr_comment.md', 'w') as f:
            f.write(comment_content)

        print("Generated PR comment:")
        print("=" * 50)
        print(comment_content)
        EOF

    - name: Post comment to PR
      if: steps.changed-files.outputs.changed_files_exist == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const comment = fs.readFileSync('pr_comment.md', 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            console.log('Successfully posted comment to PR');
          } catch (error) {
            console.error('Error posting comment:', error);

            // Post a fallback comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🔍 Java Bug Prediction Analysis\n\n⚠️ **Analysis encountered an error**\n\nPlease check the workflow logs for details.'
            });
          }

    - name: Upload analysis results
      if: steps.changed-files.outputs.changed_files_exist == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: bug-prediction-results
        path: |
          before_analysis_results/
          after_analysis_results/
          pr_comment.md
          changed_files.txt
        retention-days: 30

    - name: Check for high-risk files
      if: steps.changed-files.outputs.changed_files_exist == 'true'
      run: |
        python << 'EOF'
        import os
        import pandas as pd
        from pathlib import Path

        # Check if any files have very high defect probability in the after state
        results_dir = "after_analysis_results"
        high_risk_threshold = 0.8

        if os.path.exists(results_dir):
            prediction_files = list(Path(results_dir).glob("*_DA_predictions.csv"))

            high_risk_files = []
            for pred_file in prediction_files:
                try:
                    df = pd.read_csv(pred_file)
                    very_high_risk = df[df['probability_defective'] > high_risk_threshold]
                    if len(very_high_risk) > 0:
                        high_risk_files.extend(very_high_risk['file_path'].tolist() if 'file_path' in very_high_risk.columns else very_high_risk['file_id'].tolist())
                except Exception:
                    pass

            if high_risk_files:
                print(f"::warning::High-risk files detected with >80% defect probability: {', '.join(set(high_risk_files))}")
                print("Consider additional code review and testing for these files.")
            else:
                print("No extremely high-risk files detected.")
                
            # Also check for significant increases in risk
            before_results_dir = "before_analysis_results"
            if os.path.exists(before_results_dir):
                before_files = list(Path(before_results_dir).glob("*_DA_predictions.csv"))
                after_files = list(Path(results_dir).glob("*_DA_predictions.csv"))
                
                if before_files and after_files:
                    try:
                        before_df = pd.read_csv(before_files[0])
                        after_df = pd.read_csv(after_files[0])
                        
                        before_avg = before_df['probability_defective'].mean()
                        after_avg = after_df['probability_defective'].mean()
                        
                        if after_avg > before_avg:
                            change_pct = ((after_avg - before_avg) / before_avg) * 100
                            if change_pct > 50:
                                print(f"::warning::Significant increase in bug risk detected: {change_pct:.1f}% increase in average defect probability")
                            elif change_pct > 20:
                                print(f"::notice::Moderate increase in bug risk detected: {change_pct:.1f}% increase in average defect probability")
                    except Exception as e:
                        print(f"Could not compare before/after results: {e}")
        EOF
